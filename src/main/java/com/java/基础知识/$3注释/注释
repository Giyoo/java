1.注释种类
标签描述示例@author标识一个类的作者@author description@deprecated指名一个过期的类或成员@deprecated description{@docRoot}指明当前文档根目录的路径Directory Path@exception标志一个类抛出的异常@exception exception-name explanation{@inheritDoc}从直接父类继承的注释Inherits a comment from the immediate surperclass.{@link}插入一个到另一个主题的链接{@link name text}{@linkplain}插入一个到另一个主题的链接，但是该链接显示纯文本字体Inserts an in-line link to another topic.@param说明一个方法的参数@param parameter-name explanation@return说明返回值类型@return explanation@see指定一个到另一个主题的链接@see anchor@serial说明一个序列化属性@serial description@serialData说明通过writeObject( ) 和 writeExternal( )方法写的数据@serialData description@serialField说明一个ObjectStreamField组件@serialField name type description@since标记当引入一个特定的变化时@since release@throws和 @exception标签一样.The @throws tag has the same meaning as the @exception tag.{@value}显示常量的值，该常量必须是static属性。Displays the value of a constant, which must be a static field.@version指定类的版本@version info

2.注释规约
1. 【强制】类、类属性、类方法的注释必须使用 javadoc 规范，使用/**内容*/格式，不得使用//xxx 方式。说明：在 IDE 编辑窗口中，javadoc 方式会提示相关注释，生成 javadoc 可以正确输出相应注释；在 IDE 中，工程调用方法时，不进入方法即可悬浮提示方法、参数、返回值的意义，提高阅读

2. 【强制】所有的抽象方法（包括接口中的方法）必须要用 javadoc 注释、除了返回值、参数、
异常说明外，还必须指出该方法做什么事情，实现什么功能。
说明：如有实现和调用注意事项，请一并说明。

3. 【强制】所有的类都必须添加创建者信

4. 【强制】方法内部单行注释，在被注用/* */注释，注意与代码对齐

5. 【强制】所有的枚举类型字段必须要有注释，说明每个数据项的用途。

6. 【推荐】与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词、关键字，保
持英文原文即可。
反例：“TCP 连接超时”解释成“传输控制协议连接超时”，理解反而费脑筋

7. 【推荐】代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑
等的修改。
说明：代码与注释更新不同步，就像路网与导航软件更新不同步一样，如果导航软件严重滞后，
就失去了导航的意义

8. 【参考】注释掉的代码尽量要配合说明，而不是简单的注释掉。说明：代码被注释掉有两种可能性：1）后续会恢复此段代码逻辑。2）永久不用。前者有备注信息，难以知晓注释动机。后者建议直接删掉（代码仓库保存了历史代码

9. 【参考】对于注释的要求：第一、能够准确反应设计思想和代码逻辑；第二、能够描述业务含
义，使别的程序员能够迅速了解到代码背后的信息。完全没有注释的大段代码对于阅读者形同
天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路；注释也是给继任者看
的，使其能够快速接替自己的工作

10.【参考】好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担。反例：// put elephant into fridge
put(elephant, fridge);
方法名 put，加上两个有意义的变量名 elephant 和 fridge，已经说明了这是在干什么，语义清晰的代码不需要额外的注

11.【参考】特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，
经常清理此类标记。线上故障有时候就是来源于这些标记处的代码。
1） 待办事宜（TODO）:（ 标记人，标记时间，[预计处理时间]）
表示需要实现，但目前还未实现的功能。这实际上是一个 javadoc 的标签，目前的
javadoc 还没有实现，但已经被广泛使用。只能应用于类，接口和方法（因为它是一个 javadoc
标签）。
2） 错误，不能工作（FIXME）:（标记人，标记时间，[预计处理时间]）在注释中用 FIXME 标记某代码是错误的，而且不能工作，需要及时纠正的情

3.示例
/**
* 这个类演示了文档注释
* @author Ayan Amhed
* @version 1.2
*/
public class SquareNum {
   /**
   * This method returns the square of num.
   * This is a multiline description. You can use
   * as many lines as you like.
   * @param num The value to be squared.
   * @return num squared.
   */
   public double square(double num) {
      return num * num;
   }
   /**
   * This method inputs a number from the user.
   * @return The value input as a double.
   * @exception IOException On input error.
   * @see IOException
   */
   public double getNumber() throws IOException {
      InputStreamReader isr = new InputStreamReader(System.in);
      BufferedReader inData = new BufferedReader(isr);
      String str;
      str = inData.readLine();
      return (new Double(str)).doubleValue();
   }
   /**
   * This method demonstrates square().
   * @param args Unused.
   * @return Nothing.
   * @exception IOException On input error.
   * @see IOException
   */
   public static void main(String args[]) throws IOException
   {
      SquareNum ob = new SquareNum();
      double val;
      System.out.println("Enter value to be squared: ");
      val = ob.getNumber();
      val = ob.square(val);
      System.out.println("Squared value is " + val);
   }
}

4.总结
a.类的注释
  ●     类的基本信息，类的创建时间
  ●     @author 作者
  ●     @see 链接类等
  ●     @version 版本
b.方法的注释
  ●    方法的基本信息，描述方法的功能，方法创建的时间
  ●    @author 作者
  ●    @param 参数
  ●    @return 返回参数
  ●    @exception 异常
